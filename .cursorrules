# chess-community 프로젝트 .cursorrules

## 프로젝트 스택
- Next.js 15 (App Router)
- React 19
- Supabase (서버/DB)
- Tailwind CSS
- shadcn (shadcn-ui → shadcn 패키지)
- Zustand (상태관리)
- Lucide (아이콘)

## 폴더 구조 참고
- src/components: shadcn, lucide 등 재사용 UI 컴포넌트
- src/features: 도메인별 상태/로직(예: user, game 등)
- src/store: zustand 등 전역 상태
- src/services: supabase 등 외부 서비스 연동
- src/icons: lucide 등 커스텀 아이콘
- src/hooks, src/types, src/utils, src/constants, src/styles 등

## Supabase 서버 설계 참고
- src/services/supabase/ 하위에 supabase 클라이언트, API 래퍼, DB 쿼리 등 서버 연동 로직을 분리
- src/features/ 또는 src/store/에서 supabase 서비스 호출 및 상태관리
- 인증, 실시간, DB 연동 등은 supabase-js를 통해 구현
- 서버리스 함수(Edge Functions) 필요시 /supabase/functions/ 등 별도 폴더 고려

## 최적화 및 참고 문구
- 컴포넌트는 최대한 분리/재사용, props 명확하게 정의
- Zustand store는 도메인별로 분리, 불필요한 렌더링 방지
- Supabase 쿼리는 hooks/services에서만 호출, 컴포넌트에서 직접 호출 금지
- Tailwind는 className merge, shadcn 컴포넌트 커스터마이즈 적극 활용
- 코드 스플리팅, dynamic import 적극 활용
- 불필요한 re-render, useEffect 남용 주의
- types 폴더에 타입 정의, any 사용 지양
- 서비스/스토어/훅/유틸 등은 역할별로 폴더 분리

## 프로젝트를 진행하는 기기 특이사항
 - 윈도우 운영체제

# AI 참고: 이 파일의 내용을 기반으로 폴더 구조, 스택, 최적화, supabase 서버 설계에 맞게 작업할 것, 앞으로 프로젝트에 참고해야 되는 사항이면 위에 기입할 것
